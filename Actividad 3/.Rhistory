H<-0.81
t<-(seq(length=100, from=0.0001, to=10))    #time parameter (ms)
s<-(seq(length=100, from=0.00001, to=0.01)) #space parameter (bytes^-1)
l<-138.185 #bytes por segundo
var<-89.668^2 # varianza
H<-0.81
t<-(seq(length=100, from=0.0001, to=10))    #time parameter (ms)
s<-(seq(length=100, from=0.00001, to=0.01)) #space parameter (bytes^-1)
Bw<-function(t,s) {log10(l+((((o^2)*(t^((2*H)-1)))/2)*s))}
z<-outer(t,s,Bw) # La función outer evalua la función Bw en cada punto(si,tj)
persp((t),(s),(z),theta=20,phi=-0,col ="lightblue", sub="Ancho de Banda Efectivo",ticktype ="detailed",xlab="t (ms)",ylab="s",zlab="(s,t)")
set.seed(100)
x <- rnorm(1024)
walk <- cumsum(x)
## calculate the Hurst coefficient of a random
## walk series using various techniques
methods <- c("aggabs","aggvar","diffvar","higuchi")
z <- lapply(methods, function(method, walk){
hurstBlock(ifelse1(method=="higuchi",diff(walk),walk), method=method)
},walk=walk )
names(z) <- methods
## plot results
old.plt <- splitplot(2,2,1)
for (i in 1:4){
if (i > 1)
splitplot(2,2,i)
plot(z[[i]], key=FALSE)
mtext(paste(attr(z[[i]],"stat.name"), round(as.numeric(z[[i]]),3), sep=", H="),
line=0.5, adj=1)
}
par(old.plt)
library(fractal)
## create test series
set.seed(100)
x <- rnorm(1024)
walk <- cumsum(x)
## calculate the Hurst coefficient of a random
## walk series using various techniques
methods <- c("aggabs","aggvar","diffvar","higuchi")
z <- lapply(methods, function(method, walk){
hurstBlock(ifelse1(method=="higuchi",diff(walk),walk), method=method)
},walk=walk )
names(z) <- methods
## plot results
old.plt <- splitplot(2,2,1)
for (i in 1:4){
if (i > 1)
splitplot(2,2,i)
plot(z[[i]], key=FALSE)
mtext(paste(attr(z[[i]],"stat.name"), round(as.numeric(z[[i]]),3), sep=", H="),
line=0.5, adj=1)
}
par(old.plt)
## create test series
set.seed(100)
x <- rnorm(1024)
walk <- cumsum(x)
## calculate the Hurst coefficient of a random
## walk series using various techniques. use a
## multitaper SDF
methods <- c("standard","smoothed")
z <- lapply(methods, function(method, walk){
hurstSpec(walk, method=method, sdf.method="multitaper")
},walk=walk )
names(z) <- methods
## plot results
old.plt <- par("plt")
for (i in 1:2){
splitplot(2,1,i)
plot(z[[i]])
}
hurstACVF(wmtsa::nile, Ascale=1000000, lag.min=3, lag.max=68)
wmtsa::nile
set_belly
set_bellx
set_belly
set_belly
set_bellx
set_bellx
x
wmtsa::nile
hurstACVF(set_belly, Ascale=1000000, lag.min=3, lag.max=68)
hurstACVF(set_bellx, Ascale=1000000, lag.min=3, lag.max=68)
x <- rnorm(1024)
walk <- cumsum(x)
x
walk
x
library("longmemo", lib.loc="~/R/win-library/3.1")
C<-52 #tasa de servicio
u<-seq(length=30, from=10, to=60) #tasa promedio de arribos #50,83
var<-30.18
s<-(2*(C-u))/var
Bw_MB<-u+((s*var)/2)
plot(u,s)
lot(s,Bw_MB)
plot(s,Bw_MB)
aggvarFit(x, levels = 50, minnpts = 3, cut.off = 10^c(0.7, 2.5),
doplot = TRUE, trace = FALSE, title = NULL, description = NULL)
library("fArma", lib.loc="~/R/win-library/3.1")
library(fArma)
library(longmemo)
x<-data(ethernetTraffic)
x<-data(ethernetTraffic)
library(somebm)
waveletFit(x, length = NULL, order = 2, octave = c(2, 8),
doplot = TRUE, title = NULL, description = NULL)
library(fArma)
library(longmemo)
waveletFit(x, length = NULL, order = 2, octave = c(2, 8),
doplot = TRUE, title = NULL, description = NULL)
x
data(ethernetTraffic)
x<-ethernetTraffic
waveletFit(x, length = NULL, order = 2, octave = c(2, 8),
doplot = TRUE, title = NULL, description = NULL)
higuchiFit(x, levels = 50, minnpts = 2, cut.off = 10^c(0.7, 2.5),
doplot = TRUE, trace = FALSE, title = NULL, description = NULL)
devtools::install_github("rstudio/rmarkdown")
install_github("rstudio/rmarkdown")
\usepackage[utf8]{inputnc}
install.packages(c("caret", "colorspace", "forecast", "formatR", "Formula", "gbm", "ggplot2", "knitr", "markdown", "mboost", "scatterplot3d"))
install.packages(c("caret", "colorspace", "forecast", "formatR",
)
))
install.packages("markdown")
pandoc -s -N --template=template.latex doc.md -o doc.pdf
aggvarFit(x, levels = 50, minnpts = 3, cut.off = 10^c(0.7, 2.5),
doplot = TRUE, trace = FALSE, title = NULL, description = NULL)
library(fArma)
library(longmemo)
data(ethernetTraffic)
x<-ethernetTraffic
aggvarFit(x, levels = 50, minnpts = 3, cut.off = 10^c(0.7, 2.5),
doplot = TRUE, trace = FALSE, title = NULL, description = NULL)
render('test1.Rmd',pdf_document())
summary(x)
install.packages(c("BradleyTerry2", "C50", "car", "caret", "coin", "colorspace", "CORElearn", "digest", "e1071", "ElemStatLearn", "evaluate", "expsmooth", "forecast", "formatR", "Formula", "gbm", "ggplot2", "gstat", "gtools", "highr", "Hmisc", "htmltools", "intervals", "kernlab", "knitr", "labeling", "lme4", "lmtest", "manipulate", "mboost", "minqa", "multcomp", "mvtnorm", "party", "pgmm", "plyr", "polspline", "pROC", "quantreg", "rattle", "RColorBrewer", "Rcpp", "RcppArmadillo", "RcppEigen", "reshape2", "rgeos", "rJava", "rmarkdown", "rms", "rpart.plot", "RWeka", "RWekajars", "sandwich", "scales", "scatterplot3d", "sp", "spacetime", "SparseM", "stabs", "stringr", "strucchange", "TH.data", "timeDate", "tseries", "xtable", "zoo"))
x
aggvarFit(x, levels = 50, minnpts = 3, cut.off = 10^c(0.7, 2.5),
doplot = TRUE, trace = FALSE, title = NULL, description = NULL)
library("fArma", lib.loc="~/R/win-library/3.1")
aggvarFit(x, levels = 50, minnpts = 3, cut.off = 10^c(0.7, 2.5),
doplot = TRUE, trace = FALSE, title = NULL, description = NULL)
install.packages("digest")
library(digest)
diffvarFit(x, levels = 50, minnpts = 3, cut.off = 10^c(0.7, 2.5),
doplot = TRUE, trace = FALSE, title = NULL, description = NULL)
absvalFit(x, levels = 50, minnpts = 3, cut.off = 10^c(0.7, 2.5), moment = 1,
doplot = TRUE, trace = FALSE, title = NULL, description = NULL)
higuchiFit(x, levels = 50, minnpts = 2, cut.off = 10^c(0.7, 2.5),
doplot = TRUE, trace = FALSE, title = NULL, description = NULL)
pengFit(x, levels = 50, minnpts = 3, cut.off = 10^c(0.7, 2.5),
method = c("mean", "median"),
doplot = TRUE, trace = FALSE, title = NULL, description = NULL)
rsFit(x, levels = 50, minnpts = 3, cut.off = 10^c(0.7, 2.5),
doplot = TRUE, trace = FALSE, title = NULL, description = NULL)
perFit(x, cut.off = 0.1, method = c("per", "cumper"),
doplot = TRUE, title = NULL, description = NULL)
boxperFit(x, nbox = 100, cut.off = 0.10,
doplot = TRUE, trace = FALSE, title = NULL, description = NULL)
waveletFit(x, length = NULL, order = 2, octave = c(2, 8),
doplot = TRUE, title = NULL, description = NULL)
aggvarFit(x, levels = 50, minnpts = 3, cut.off = 10^c(0.7, 2.5),
doplot = TRUE, trace = FALSE, title = NULL, description = NULL)
aggvarFit(x, levels = 50, minnpts = 3, cut.off = 10^c(0.7, 2.5),
doplot = TRUE, trace = FALSE, title = NULL, description = TRUE)
aggvarFit(x, levels = 50, minnpts = 3, cut.off = 10^c(0.7, 2.5),
doplot = TRUE, trace = TRUE, title = NULL, description = FALSE)
aggvarFit(x, levels = 50, minnpts = 3, cut.off = 10^c(0.7, 2.5),
doplot = TRUE, trace = FALSE, title = NULL, description = FALSE)
aggvarFit(x, levels = 50, minnpts = 3, cut.off = 10^c(0.7, 2.5),
doplot = TRUE, trace = TRUE, title = NULL, description = NULL)
R\win-library\3.1 to R\win-library\3.2 before running update.packages(checkBuilt=TRUE, ask=FALSE)
win-library\3.1 to R\win-library\3.2 before running update.packages(checkBuilt=TRUE, ask=FALSE)
install.packages("somebm")
install.packages("fArma")
install.packages("longmemo")
install.packages("rmarkdown")
C<-2.9
B<-0.3
u<-1.591
var<-4.169
H<-0.75
t<-(B/(C-u))*(H/(1-H))
s<-(B+(C+u)*t)/(var*t^(2*H))
Bw_MFB<-u+(((s*var)/2)*(t^(2*H-1)))
Bw_MFB
C<-2.9
B<-0.3
u<-1.591
var<-4.169
H<-0.8
t<-(B/(C-u))*(H/(1-H))
s<-(B+(C+u)*t)/(var*t^(2*H))
Bw_MFB<-u+(((s*var)/2)*(t^(2*H-1)))
Bw_MFB
plot(set_bellx,set_belly,type="l",xlab="time (ms)",ylab="Packets",main="Muestra Bellcore trace", ylim=c(0,500))
abline(v=NULL,h=400,lty=3,col="green")
abline(v=NULL,h=35,lty=3,col="green")
plot(set_bellx,set_belly,type="l",xlab="time (ms)",ylab="Packets",main="Muestra Bellcore trace", ylim=c(0,500))
abline(v=NULL,h=400,lty=3,col="red")
abline(v=NULL,h=159,lty=3,col="blue")
set<-plot(set_bellx,set_belly,type="l",xlab="time (ms)",ylab="Packets",main="Muestra Bellcore trace", ylim=c(0,500))
set
abline(v=NULL,h=400,lty=3,col="red")
abline(v=NULL,h=159,lty=3,col="blue")
summary(set)
mean(set_bellx)
abline(v=NULL,h=256,lty=3,col="blue")
abline(v=NULL,h=150,lty=3,col="blue")
abline(v=NULL,h=200,lty=3,col="blue")
C<-25
B<-4
u<-24.968
var<-4.058
s<-(2*(C-u))/var
t<-B/(C-u)
Bw_MB<-u+((s*var)/2)
Bw_MB
summary(x)
summary(x)
x
mpeg<-read.csv("C:/Users/NataliaA/Documents/Maestria/Tráfico L3/MPEG/Terse_StarWarsIV.dat",
header=TRUE,sep=";",na.strings="NA",dec=".")
head(mpeg)
head(mpeg,50)
datampeg<-data.frame(Bytes=mpeg$X919)
plot(datampeg)
plot(,datampeg)
vector<-1:90011
last=tail(vector,n=1)
unit_time=0.5
step=last/unit_time
h_data<-hist(vector,breaks=step)
h_data
plot(vector,datampeg)
vector<-1:90010
plot(vector,datampeg)
tail(vector)
vector<-data.frame(Time=1:90011)
plot(vector,datampeg)
head(datampeg)
h_data<-hist(vector,breaks=step)
plot(datampeg)
head(datampeg,26)
View(datampeg)
datampeg<-data.frame(Time=1:90011,Bytes=mpeg$X919)
tail(datampeg)
tail(datampeg,10)
datampeg<-data.frame(Bytes=mpeg$X919)
tail(datampeg)
tail(datampeg50)
tail(datampeg,50)
datampeg<-data.frame(Bytes=mpeg$X919[8997])
tail(datampeg,20)
tail(datampeg)
datampeg<-data.frame(Bytes=head(mpeg$X919,8997))
tail(datampeg)
vector<-data.frame(Time=1:8997)
plot(vector,datampeg)
last=tail(vector,n=1)
unit_time=0.5
step=last/unit_time
h_data<-hist(vector,breaks=step)
vector
head(vector)
vector<-data.frame(1:8997)
plot(vector,datampeg)
last=tail(vector,n=1)
unit_time=0.5
step=last/unit_time
h_data<-hist(vector,breaks=step)
vector<-c(1:8997)
plot(vector,datampeg)
last=tail(vector,n=1)
unit_time=0.5
step=last/unit_time
h_data<-hist(vector,breaks=step)
set<-head(datampeg,20)
plot(set)
set
time<-c(1:20)
plot(time,set)
mpeg<-data.frame(time,set)
mpeg
plot(mpeg)
plot(mpeg, type="l")
datampeg<-data.frame(Bytes=head(mpeg$X919,89998))
datampeg<-data.frame(Bytes=head(mpeg$X919,9000))
tail(mpeg)
mpeg<-read.csv("C:/Users/NataliaA/Documents/Maestria/Tráfico L3/MPEG/Terse_StarWarsIV.dat",
header=TRUE,sep=";",na.strings="NA",dec=".")
datampeg<-data.frame(Bytes=head(mpeg$X919,9000))
tail(datampeg)
tail(datampeg,20)
tail(mpeg,20)
datampeg<-data.frame(Bytes=head(mpeg$X919,89998))
tail(datampeg,20)
datampeg<-data.frame(Bytes=head(mpeg$X919,89997))
3599880/1000
89998/3600
data<-head(datampeg,250)
time<-(seq(length=250, from=1, to=20))    #time parameter (s)
data<-head(datampeg,250)
time<-(seq(length=250, from=1, to=20))    #time parameter (s)
set<-data.frame(time,data)
set
plot(set, type="l")
head(data)
datampeg<-data.frame(Bits/frame=head(mpeg$X919,89997))
data<-head(datampeg,250)
time<-(seq(length=250, from=1, to=20))    #time parameter (s)
set<-data.frame(time,data)
set
plot(set, type="l")
set
head(datampeg)
datampeg<-data.frame(Bits/frame=head(mpeg$X919,89997))
datampeg<-data.frame(Bytes=head(mpeg$X919,89997))
data<-head(datampeg,250)
time<-(seq(length=250, from=1, to=20))    #time parameter (s)
set<-data.frame(time,bits/frame=data)
set
head(data)
set<-data.frame(time,bits/frame=data$Bytes)
set<-data.frame(time,"bits/frame"=data$Bytes)
set
head(mpeg)
datampeg<-data.frame(Bits=head(mpeg$X919,89997))
data<-head(datampeg,250)
time<-(seq(length=250, from=1, to=20))    #time parameter (s)
set<-data.frame(time,data)
plot(set, type="l")
plot(set, type="l",ylab="bits/frame")
plot(set, type="l",ylab="bits/frame",xlab="time (secs)")
plot(data)
plot(time)
89998/3600
data<-head(datampeg,250)
time<-(seq(length=250, from=1, to=10))    #time parameter (s)
set<-data.frame(time,data)
set
plot(set, type="l",ylab="bits/frame",xlab="time (secs)")
plot(set)
plot(set,type"l")
plot(set,type="l")
plot(set,type="l")
plot(data,type="l")
plot(data)
plot(data,)
plot(,data)
plot(time,data)
ot(set, type="l",ylab="bits/frame",xlab="time (secs)")
plot(set, type="l",ylab="bits/frame",xlab="time (secs)")
plot(set, type="h",ylab="bits/frame",xlab="time (secs)")
plot(set, type="h",ylab="bits/frame",xlab="time (secs)",sub="Dataset de película Star Wars")
plot(set, type="h",ylab="bits/frame",xlab="time (secs)",main="Dataset de película Star Wars")
set<-data.frame(time,data)
plot(set, type="h",ylab="bits/frame",xlab="time (secs)",main="Dataset de película Star Wars")
l<-143.516  #bits per second
d<-0.5      #seconds
b<-40000    #bits
time<-(seq(length=100, from=0.0001, to=10))    #time parameter (ms)
space<-(seq(length=100, from=0.00001, to=0.01)) #space parameter (bytes^-1)
t<-time
s<-space
l<-143.516  #bits per second
d<-0.5      #seconds
b<-40000    #bits
time<-(seq(length=100, from=0.0001, to=10))    #time parameter (ms)
space<-(seq(length=100, from=0.00001, to=0.01)) #space parameter (bytes^-1)
t<-time
s<-space
Bwmpeg<-function(t,s) {(b/t)*(t/d)+(1/(st))*log10(1+((t/d)-(t/d))*(e^(b*s)-1))}
z<-outer(t,s,Bw) # La función outer evalua la función Bw en cada punto(si,tj)
persp((t),(s),(z),theta=20,phi=-0,col ="lightblue", sub="Ancho de Banda Efectivo de un proceso con movimiento fractal browniano"
,ticktype ="detailed",xlab="t (ms)",ylab="s",zlab="(s,t)")
library("fArma", lib.loc="~/R/win-library/3.2")
library(rgl)
persp((t),(s),(z),theta=20,phi=-0,col ="lightblue",ticktype ="detailed",xlab="t (ms)",ylab="s",zlab="(s,t)")
persp3d((t),(s),(z),theta=20,phi=-0,col ="lightblue",ticktype ="detailed",xlab="t (ms)",ylab="s",zlab="(s,t)")
install.packages("rgl")
library(rgl)
persp3d((t),(s),(z),theta=20,phi=-0,col ="lightblue",ticktype ="detailed",xlab="t (ms)",ylab="s",zlab="(s,t)")
time<-(seq(length=100, from=0.0001, to=2))    #time parameter (ms)
space<-(seq(length=100, from=0.00001, to=0.01)) #space parameter (bytes^-1)
t<-time
s<-space
Bwmpeg<-function(t,s) {(b/t)*(t/d)+(1/(st))*log10(1+((t/d)-(t/d))*(e^(b*s)-1))}
z<-outer(t,s,Bw) # La función outer evalua la función Bw en cada punto(si,tj)
persp3d((t),(s),(z),theta=20,phi=-0,col ="lightblue",ticktype ="detailed",front="lines",xlab="t (ms)",ylab="s",zlab="(s,t)")
log10(10)
log10(1)
log10(2)
log10(1:10)
time<-(seq(length=100, from=0.0001, to=2))    #time parameter (ms)
space<-(seq(length=100, from=0.0001, to=2)) #space parameter (bytes^-1)
t<-time
s<-log10(space)
t
s
space<-(seq(length=100, from=0.98, to=2)) #space parameter (bytes^-1)
s<-log10(space)
s
space<-(seq(length=100, from=1, to=2)) #space parameter (bytes^-1)
s<-log10(space)
s
Bwmpeg<-function(t,s) {(b/t)*(t/d)+(1/(st))*log10(1+((t/d)-(t/d))*(e^(b*s)-1))}
z<-outer(t,s,Bw) # La función outer evalua la función Bw en cada punto(si,tj)
persp3d((t),(s),(z),theta=20,phi=-0,col ="lightblue",ticktype ="detailed",front="lines",xlab="t (ms)",ylab="s",zlab="(s,t)")
space<-(seq(length=100, from=0.0001, to=2)) #space parameter (bytes^-1)
s<-log10(space)
s
time<-(seq(length=100, from=0.0001, to=2))    #time parameter (ms)
space<-(seq(length=100, from=0.0001, to=2)) #space parameter (bytes^-1)
t<-time
s<-(space)
Bwmpeg<-function(t,s) {(b/t)*(t/d)+(1/(st))*log10(1+((t/d)-(t/d))*(e^(b*s)-1))}
z<-outer(t,s,Bw) # La función outer evalua la función Bw en cada punto(si,tj)
persp((t),(s),(z),theta=20,phi=-0,col ="lightblue", sub="Ancho de Banda Efectivo de una traza de video MPEG-4"
,ticktype ="detailed",xlab="t (ms)",ylab="s",zlab="(s,t)")
Bwmpeg<-function(t,s) {((b/t)*(t/d))+((1/(st))*log10(1+((t/d)-(t/d))*(e^(b*s)-1))}
z<-outer(t,s,Bw) # La función outer evalua la función Bw en cada punto(si,tj)
persp((t),(s),(z),theta=20,phi=-0,col ="lightblue", sub="Ancho de Banda Efectivo de una traza de video MPEG-4"
,ticktype ="detailed",xlab="t (ms)",ylab="s",zlab="(s,t)")
Bwmpeg<-function(t,s) {((b/t)*floor(t/d))+((1/(st))*log10(1+((t/d)-floor(t/d))*(e^(b*s)-1))}
l<-143.516  #bits per second
d<-0.5      #seconds
b<-40000    #bits
time<-(seq(length=100, from=0.0001, to=2))    #time parameter (ms)
space<-(seq(length=100, from=0.0001, to=2)) #space parameter (bytes^-1)
t<-time
s<-(space)
Bwmpeg<-function(t,s) {((b/t)*floor(t/d))+((1/(st))*log10(1+((t/d)-floor(t/d))*(e^(b*s)-1))}
Bwmpeg<-function(t,s) {((b/t)*floor(t/d))+((1/(st))*log10(1+((t/d)-floor(t/d))*(e^(b*s)-1)))}
z<-outer(t,s,Bw) # La función outer evalua la función Bw en cada punto(si,tj)
persp((t),(s),(z),theta=20,phi=-0,col ="lightblue", sub="Ancho de Banda Efectivo de una traza de video MPEG-4"
,ticktype ="detailed",xlab="t (ms)",ylab="s",zlab="(s,t)")
z<-outer(t,s,Bwmpeg) # La función outer evalua la función Bw en cada punto(si,tj)
persp((t),(s),(z),theta=20,phi=-0,col ="lightblue", sub="Ancho de Banda Efectivo de una traza de video MPEG-4"
,ticktype ="detailed",xlab="t (ms)",ylab="s",zlab="(s,t)")
z<-outer(t,s,Bwmpeg)
t<-time
s<-(space)
Bwmpeg<-function(t,s) {((b/t)*floor(t/d))+((1/(s*t))*log10(1+((t/d)-floor(t/d))*(e^(b*s)-1)))}
z<-outer(t,s,Bwmpeg) #
Bwmpeg<-function(t,s) {((b/t)*floor(t/d))+((1/(s*t))*log10(1+((t/d)-floor(t/d))*(exp(b*s)-1)))}
z<-outer(t,s,Bwmpeg)
persp((t),(s),(z),theta=20,phi=-0,col ="lightblue", sub="Ancho de Banda Efectivo de una traza de video MPEG-4"
,ticktype ="detailed",xlab="t (ms)",ylab="s",zlab="(s,t)")
z
l<-143.516  #bits per second
d<-0.5      #seconds
b<-40000    #bits
time<-(seq(length=100, from=1, to=20))    #time parameter (ms)
space<-(seq(length=100, from=1, to=20)) #space parameter (bytes^-1)
t<-time
s<-(space)
Bwmpeg<-function(t,s) {((b/t)*floor(t/d))+((1/(s*t))*log10(1+((t/d)-floor(t/d))*(exp(b*s)-1)))}
z<-outer(t,s,Bwmpeg)
z
floor(t/d)
t/d
Bwmpeg<-function(t,s) {((b/t)*floor(t/d))+((1/(s*t))*log10(1+((t/d)-floor(t/d))*(exp(b*s)-1)))}
z
armaSim(model = list(ar = c(0.5, -0.5), d = 0, ma = 0.1), n = 100,
innov = NULL, n.start = 100, start.innov = NULL,
rand.gen = rnorm, rseed = NULL, addControl = FALSE, ...)
armaSim(model = list(ar = c(0.5, -0.5), d = 0, ma = 0.1), n = 100,
innov = NULL, n.start = 100, start.innov = NULL,
rand.gen = rnorm, rseed = NULL, addControl = FALSE)
armaSim(model = list(ar = c(0.5, -0.5), d = 0, ma = 0.1), n = 100,
innov = NULL, n.start = 100, start.innov = NULL,
rand.gen = rnorm, rseed = NULL, addControl = FALSE,doplot=TRUE)
arima<-(armaSim(model = list(ar = c(0.5, -0.5), d = 0, ma = 0.1), n = 100,
innov = NULL, n.start = 100, start.innov = NULL,
rand.gen = rnorm, rseed = NULL, addControl = FALSE)
)
plot(arima)
x1 <- simFGN0(100, 0.7) #Simulación de un proceso fraccional gaussiano
x2 <- simARMA0(100, 0.7)
x3<-plot(simFGN0(1000, 0.8)) #- time series plot
C<-2.9
B<-0.3
u<-1.591
var<-4.169
H<-0.8
t<-(B/(C-u))*(H/(1-H))
s<-(B+(C+u)*t)/(var*t^(2*H))
Bw_MFB<-u+(((s*var)/2)*(t^(2*H-1)))
Bw_MFB
set<-plot(set_bellx,set_belly,type="l",xlab="time (ms)",ylab="Packets",
main="Muestra Bellcore trace", ylim=c(0,500))
abline(v=NULL,h=400,lty=3,col="red")
abline(v=NULL,h=159,lty=3,col="blue")
mpeg<-read.csv("C:/Users/NataliaA/Documents/Maestria/Tráfico L3/MPEG/Terse_StarWarsIV.dat",
header=TRUE,sep=";",na.strings="NA",dec=".")
datampeg<-data.frame(Bits=head(mpeg$X919,89997))
data<-head(datampeg,250)
time<-(seq(length=250, from=1, to=10))    #time parameter (s)
set<-data.frame(time,data)
plot(set, type="h",ylab="bits/frame",xlab="time (secs)",main="Dataset de película Star Wars")
l<-143.516  #bits per second
d<-0.5      #seconds
b<-40000    #bits
time<-(seq(length=100, from=1, to=20))    #time parameter (ms)
space<-(seq(length=100, from=1, to=20)) #space parameter (bytes^-1)
t<-time
s<-(space)
Bwmpeg<-function(t,s) {((b/t)*floor(t/d))+((1/(s*t))*log10(1+((t/d)-floor(t/d))*(exp(b*s)-1)))}
z<-outer(t,s,Bwmpeg) # La función outer evalua la función Bw en cada punto(si,tj)
