t
s
t<-log10(seq(length=100, from=1, to=200))    #time parameter (ms)
s<-log10(seq(length=100, from=1, to=5)) #space parameter (bytes^-1)
t<-log10(seq(length=100, from=1, to=100))    #time parameter (ms)
s<-log10(seq(length=100, from=1, to=5)) #space parameter (bytes^-1)
Bw<-function(t,s) {u+(((s*var)/2)*(t^(2*H-1)))}
z<-outer(t,s,Bw) # La función outer evalua la función Bw en cada punto (si,tj)
persp((t),(s),(z),theta=20,phi=-0,col ="lightblue", sub="Ancho de Banda Efectivo de un proceso con movimiento fractal browniano"
,ticktype ="detailed",xlab="t (ms)",ylab="s",zlab="(s,t)")
H<-0.7164
u<-mean(dataKb)
var<-var(dataKb)
C<-2.9
B<-0.3
t<-log10(seq(length=100, from=1, to=100))    #time parameter (ms)
s<-log10(seq(length=100, from=1, to=5)) #space parameter (bytes^-1)
Bw<-function(t,s) {u+(((s*var)/2)*(t^(2*H-1)))}
z<-outer(t,s,Bw) # La función outer evalua la función Bw en cada punto (si,tj)
persp((t),(s),(z),theta=20,phi=-0,col ="lightblue", sub="Ancho de Banda Efectivo de un proceso con movimiento fractal browniano"
,ticktype ="detailed",xlab="t (ms)",ylab="s",zlab="(s,t)")
C<-2.9
B<-0.3
u<-1.591
var<-0.4350589
H<-0.7164
t<-(B/(C-u))*(H/(1-H))
s<-(B+(C-u)*t)/(var*t^(2*H))
t
s
Bw_MFB<-u+(((s*var)/2)*(t^(2*H-1)))
Bw_MFB
t<-log10(seq(length=100, from=1, to=100))    #time parameter (ms)
s<-log10(seq(length=100, from=1, to=10)) #space parameter (bytes^-1)
Bw<-function(t,s) {u+(((s*var)/2)*(t^(2*H-1)))}
z<-outer(t,s,Bw) # La función outer evalua la función Bw en cada punto (si,tj)
persp((t),(s),(z),theta=20,phi=-0,col ="lightblue", sub="Ancho de Banda Efectivo de un proceso con movimiento fractal browniano"
,ticktype ="detailed",xlab="t (ms)",ylab="s",zlab="(s,t)")
s<-log10(seq(length=100, from=1, to=20)) #space parameter (bytes^-1)
Bw<-function(t,s) {u+(((s*var)/2)*(t^(2*H-1)))}
z<-outer(t,s,Bw) # La función outer evalua la función Bw en cada punto (si,tj)
persp((t),(s),(z),theta=20,phi=-0,col ="lightblue", sub="Ancho de Banda Efectivo de un proceso con movimiento fractal browniano"
,ticktype ="detailed",xlab="t (ms)",ylab="s",zlab="(s,t)")
t<-log10(seq(length=100, from=1, to=200))    #time parameter (ms)
s<-log10(seq(length=100, from=1, to=20)) #space parameter (bytes^-1)
Bw<-function(t,s) {u+(((s*var)/2)*(t^(2*H-1)))}
z<-outer(t,s,Bw) # La función outer evalua la función Bw en cada punto (si,tj)
persp((t),(s),(z),theta=20,phi=-0,col ="lightblue", sub="Ancho de Banda Efectivo de un proceso con movimiento fractal browniano"
,ticktype ="detailed",xlab="t (ms)",ylab="s",zlab="(s,t)")
t<-log10(seq(length=100, from=1, to=100))    #time parameter (ms)
s<-log10(seq(length=100, from=1, to=50)) #space parameter (bytes^-1)
Bw<-function(t,s) {u+(((s*var)/2)*(t^(2*H-1)))}
z<-outer(t,s,Bw) # La función outer evalua la función Bw en cada punto (si,tj)
persp((t),(s),(z),theta=20,phi=-0,col ="lightblue", sub="Ancho de Banda Efectivo de un proceso con movimiento fractal browniano"
,ticktype ="detailed",xlab="t (ms)",ylab="s",zlab="(s,t)")
t<-log10(seq(length=100, from=1, to=100))    #time parameter (ms)
s<-log10(seq(length=100, from=1, to=100)) #space parameter (bytes^-1)
Bw<-function(t,s) {u+(((s*var)/2)*(t^(2*H-1)))}
z<-outer(t,s,Bw) # La función outer evalua la función Bw en cada punto (si,tj)
persp((t),(s),(z),theta=20,phi=-0,col ="lightblue", sub="Ancho de Banda Efectivo de un proceso con movimiento fractal browniano"
,ticktype ="detailed",xlab="t (ms)",ylab="s",zlab="(s,t)")
s
10^2.5
log10(316)
log10(400)
t<-log10(seq(length=100, from=1, to=100))    #time parameter (ms)
s<-log10(seq(length=100, from=1, to=4000)) #space parameter (bytes^-1)
Bw<-function(t,s) {u+(((s*var)/2)*(t^(2*H-1)))}
z<-outer(t,s,Bw) # La función outer evalua la función Bw en cada punto (si,tj)
persp((t),(s),(z),theta=20,phi=-0,col ="lightblue", sub="Ancho de Banda Efectivo de un proceso con movimiento fractal browniano"
,ticktype ="detailed",xlab="t (ms)",ylab="s",zlab="(s,t)")
s
log10(4000)
10^5.4
log10(25200)
log10(252000)
s<-log10(seq(length=100, from=1, to=254000)) #space parameter (bytes^-1)
s
t<-log10(seq(length=100, from=1, to=100))    #time parameter (ms)
s<-log10(seq(length=100, from=1, to=254000)) #space parameter (bytes^-1)
Bw<-function(t,s) {u+(((s*var)/2)*(t^(2*H-1)))}
z<-outer(t,s,Bw) # La función outer evalua la función Bw en cada punto (si,tj)
persp((t),(s),(z),theta=20,phi=-0,col ="lightblue", sub="Ancho de Banda Efectivo de un proceso con movimiento fractal browniano"
,ticktype ="detailed",xlab="t (ms)",ylab="s",zlab="(s,t)")
BW
Bw
Bwboot<-(dataKb,Bw,R=100)
Bwboot<-boot(dataKb,Bw,R=100)
boot.ci(Bwboot, type = "all")
Bwboot
boot.ci(Bwboot, type = "all")
H<-0.7164
u<-mean(dataKb)
var<-var(dataKb)
C<-2.9
B<-0.3
t<-log10(seq(length=100, from=1, to=100))    #time parameter (ms)
s<-log10(seq(length=100, from=1, to=254000)) #space parameter (bytes^-1)
Bw<-function(t,s) {u+(((s*var)/2)*(t^(2*H-1)))}
z<-outer(t,s,Bw) # La función outer evalua la función Bw en cada punto (si,tj)
persp((t),(s),(z),theta=20,phi=-0,col ="lightblue", sub="Ancho de Banda Efectivo de un proceso con movimiento fractal browniano"
,ticktype ="detailed",xlab="t (ms)",ylab="s",zlab="(s,t)")
Bwboot<-boot(dataKb,Bw,R=100)
boot.ci(Bwboot, type = "all")
u<-mean(dataKb)
var<-var(dataKb)
u
var
normalci<-u+c(-1,1)*qnorm(0.95)*sqrt(var)/512
normalci
u
C<-2.9
B<-0.3
u<-1.591
var<-0.4350589
H<-0.7164
t<-(B/(C-u))*(H/(1-H))
s<-(B+(C-u)*t)/(var*t^(2*H))
t
s
Bw_MFB<-u+(((s*var)/2)*(t^(2*H-1)))
Bw_MFB
C<-2.9
B<-0.3
u<-1.591
var<-0.4350589
H<-0.7164
t<-(B/(C-u))*(H/(1-H))
s<-(B+(C-u)*t)/(var*t^(2*H))
t
s
Bw_MFB<-u+(((s*var)/2)*(t^(2*H-1)))
Bw_MFB
t<-log10(seq(length=100, from=1, to=100))    #time parameter (ms)
s<-log10(seq(length=100, from=1, to=254000)) #space parameter (bytes^-1)
Bw<-function(t,s) {u+(((s*var)/2)*(t^(2*H-1)))}
z<-outer(t,s,Bw) # La función outer evalua la función Bw en cada punto (si,tj)
persp((t),(s),(z),theta=20,phi=-0,col ="lightblue", sub="Ancho de Banda Efectivo de un proceso con movimiento fractal browniano"
,ticktype ="detailed",xlab="t (ms)",ylab="s",zlab="(s,t)")
n<-512
Bw
normalci<-Bw_MFB+c(-1,1)*qnorm(0.95)*sqrt(var)/n
normalci
Bw_MFB<-u+(((s*var)/2)*(t^(2*H-1)))
Bw_MFB
normalci<-Bw_MFB+c(-1,1)*qnorm(0.95)*sqrt(var)/n
normalci
C<-2.9
B<-0.3
u<-1.591
var<-0.4350589
H<-0.7164
n<-512
t<-(B/(C-u))*(H/(1-H))
s<-(B+(C-u)*t)/(var*t^(2*H))
t
s
Bw_MFB<-u+(((s*var)/2)*(t^(2*H-1)))
Bw_MFB
normalci<-Bw_MFB+c(-1,1)*qnorm(0.95)*sqrt(var)/n
normalci
t<-log10(seq(length=100, from=1, to=100))    #time parameter (ms)
s<-log10(seq(length=100, from=1, to=254000)) #space parameter (bytes^-1)
Bw<-function(t,s) {u+(((s*var)/2)*(t^(2*H-1)))}
z<-outer(t,s,Bw) # La función outer evalua la función Bw en cada punto (si,tj)
persp((t),(s),(z),theta=20,phi=-0,col ="lightblue", sub="Ancho de Banda Efectivo de un proceso con movimiento fractal browniano"
,ticktype ="detailed",xlab="t (ms)",ylab="s",zlab="(s,t)")
normalci<-Bw_MFB+c(-1,1)*qnorm(0.95)*sqrt(var)/n
normalci
normalci<-Bw_MFB+c(-1,1)*qnorm(0.95)*sqrt(4)/n
normalci
t<-log10(seq(length=100, from=1, to=100))    #time parameter (ms)
s<-log10(seq(length=100, from=1, to=254000)) #space parameter (bytes^-1)
Bw<-function(t,s) {u+(((s*var)/2)*(t^(2*H-1)))}
mean(Bw)
summary(Bw)
Bw
z
mean(z)
summary(z)
plot(t,s)
plot(s,t)
plot(z)
z
persp((t),(s),(z),theta=20,phi=-0,col ="lightblue", sub="Ancho de Banda Efectivo de un proceso con movimiento fractal browniano"
,ticktype ="detailed",xlab="t (ms)",ylab="s",zlab="(s,t)")
persp((t),(s),(z),theta=20,phi=-0,col ="lightblue", sub="Ancho de Banda Efectivo de un proceso con movimiento fractal browniano"
,ticktype ="simple",xlab="t (ms)",ylab="s",zlab="(s,t)")
persp((t),(s),(z),theta=20,phi=-0,col ="lightblue", sub="Ancho de Banda Efectivo de un proceso con movimiento fractal browniano"
,ticktype ="detailed",xlab="t (ms)",ylab="s",zlab="(s,t)")
scatterplot3d(t,s,z)
library("scatterplot3d", lib.loc="~/R/win-library/3.2")
scatterplot3d(t,s,z)
View(z)
scatter3d(t,s,z)
normalci<-Bw_MFB+c(-1,1)*qnorm(0.95)*sqrt(4)/n
z <- seq(-10, 10, 0.01)
x <- cos(z)
y <- sin(z)
scatterplot3d(x, y, z, highlight.3d=TRUE, col.axis="blue",
col.grid="lightblue", main="scatterplot3d - 1", pch=20)
z
temp <- seq(-pi, 0, length = 50)
x <- c(rep(1, 50) %*% t(cos(temp)))
y <- c(cos(temp) %*% t(sin(temp)))
z <- c(sin(temp) %*% t(sin(temp)))
scatterplot3d(x, y, z, highlight.3d=TRUE,
col.axis="blue", col.grid="lightblue",
main="scatterplot3d - 2", pch=20)
temp <- seq(-pi, 0, length = 50)
x <- c(rep(1, 50) %*% t(cos(temp)))
y <- c(cos(temp) %*% t(sin(temp)))
z <- 10 * c(sin(temp) %*% t(sin(temp)))
color <- rep("green", length(x))
temp <- seq(-10, 10, 0.01)
x <- c(x, cos(temp))
y <- c(y, sin(temp))
z <- c(z, temp)
color <- c(color, rep("red", length(temp)))
scatterplot3d(x, y, z, color, pch=20, zlim=c(-2, 10),
main="scatterplot3d - 3")
scatterplot3d(x, y, z, color, pch=20, zlim=c(-2, 10),
main="scatterplot3d - 3")
t<-log10(seq(length=100, from=1, to=100))    #time parameter (ms)
s<-log10(seq(length=100, from=1, to=254000)) #space parameter (bytes^-1)
Bw<-function(t,s) {u+(((s*var)/2)*(t^(2*H-1)))}
z<-outer(t,s,Bw) # La función outer evalua la función Bw en cada punto (si,tj)
persp((t),(s),(z),theta=20,phi=-0,col ="lightblue", sub="Ancho de Banda Efectivo de un proceso con movimiento fractal browniano"
,ticktype ="detailed",xlab="t (ms)",ylab="s",zlab="(s,t)")
scatterplot3d(t,s,z)
scatterplot3d(z)
scatter3d(z)
scatterplot3d(s,t)
plot(z)
persp((t),(s),(z),theta=20,phi=-0,col ="lightblue", sub="Ancho de Banda Efectivo de un proceso con movimiento fractal browniano"
,ticktype ="simple",xlab="t (ms)",ylab="s",zlab="(s,t)")
library("rgl", lib.loc="~/R/win-library/3.2")
rgl.lines(z)
rgl.lines(t,s,z)
rgl.points(Bw)
rgl.points(t,s,z)
rgl.open()
rgl.points(t,s,z,color = heat.colors(100))
persp((t),(s),(z),theta=20,phi=-0,col =heat.colors(100), sub="Ancho de Banda Efectivo de un proceso con movimiento fractal browniano"
,ticktype ="simple",xlab="t (ms)",ylab="s",zlab="(s,t)")
persp((t),(s),(z),theta=20,phi=-0,col =heat.colors(10), sub="Ancho de Banda Efectivo de un proceso con movimiento fractal browniano"
persp((t),(s),(z),theta=20,phi=-0,col =heat.colors(10), sub="Ancho de Banda Efectivo de un proceso con movimiento fractal browniano"
,ticktype ="simple",xlab="t (ms)",ylab="s",zlab="(s,t)")
persp((t),(s),(z),theta=20,phi=-0,col =heat.colors(10), sub="Ancho de Banda Efectivo de un proceso con movimiento fractal browniano"
,ticktype ="simple",xlab="t (ms)",ylab="s",zlab="(s,t)")
persp((t),(s),(z),theta=20,phi=-0,col =topo.colors(10), sub="Ancho de Banda Efectivo de un proceso con movimiento fractal browniano"
,ticktype ="simple",xlab="t (ms)",ylab="s",zlab="(s,t)")
persp((t),(s),(z),theta=20,phi=-0,col =topo.colors(100), sub="Ancho de Banda Efectivo de un proceso con movimiento fractal browniano"
,ticktype ="simple",xlab="t (ms)",ylab="s",zlab="(s,t)")
persp((t),(s),(z),theta=20,phi=-0,col =topo.colors(1000), sub="Ancho de Banda Efectivo de un proceso con movimiento fractal browniano"
,ticktype ="simple",xlab="t (ms)",ylab="s",zlab="(s,t)")
persp((t),(s),(z),theta=20,phi=-0,col =cm.colors(1000), sub="Ancho de Banda Efectivo de un proceso con movimiento fractal browniano"
,ticktype ="simple",xlab="t (ms)",ylab="s",zlab="(s,t)")
persp((t),(s),(z),theta=20,phi=-0,col =cm.colors(100), sub="Ancho de Banda Efectivo de un proceso con movimiento fractal browniano"
,ticktype ="simple",xlab="t (ms)",ylab="s",zlab="(s,t)")
persp((t),(s),(z),theta=20,phi=-0,col ="lightblue", sub="Ancho de Banda Efectivo de un proceso con movimiento fractal browniano"
,ticktype ="detailed",xlab="t (ms)",ylab="s",zlab="(s,t)")
normalci<-Bw_MFB+c(-1,1)*qnorm(0.95)*sqrt(4)/n
normalci
lines(normalci)
lines(2.5)
lines(1,2,2.5)
normalci<-Bw_MFB+c(-1,1)*qnorm(0.95)*sqrt(4)/n
normalci
t<-log10(seq(length=100, from=1, to=100))    #time parameter (ms)
s<-log10(seq(length=100, from=1, to=254000)) #space parameter (bytes^-1)
C<-2.9
B<-0.3
u<-1.591
var<-0.4350589
H<-0.7164
n<-512
t<-log10(seq(length=100, from=1, to=100))    #time parameter (ms)
s<-log10(seq(length=100, from=1, to=254000)) #space parameter (bytes^-1)
dataBw<-u+(((s*var)/2)*(t^(2*H-1)))
mean(dataBw)
Bw_MFB
sd<-sqtr((1/(n-1)*(sum((dataBw-Bw_MFB)^2)))
)
sd<-sqrt((1/(n-1)*(sum((dataBw-Bw_MFB)^2))))
sd
normalci<-Bw_MFB+c(-1,1)*qnorm(0.95)*sqrt(sd)/n
normalci
dataBw
dataBw-Bw_MFB
(dataBw-Bw_MFB)^2
sd<-sqrt((1/(n-1)*(deviance(dataBw-Bw_MFB))))
deviance(dataBw-Bw_MFB)
sd<-sqrt((1/(n-1)*(sum((dataBw-Bw_MFB)^2))))
sd
sum(1:3)
sum(1:4)
Bw_MFB
sd<-sqrt((1/(n-1)*(sum((dataBw-Bw_MFB)^2))))
sd<-((1/(n-1)*(sum((dataBw-Bw_MFB)^2))))
sd
sd<-sqrt((1/(n-1)*(sum((dataBw-Bw_MFB)^2))))
normalci<-Bw_MFB+c(-1,1)*qnorm(0.95)*(sd)/n
normalci
normalci<-Bw_MFB+c(-1,1)*qnorm(0.95)*sqrt(sd)/n
normalci
qnorm(0.95)
normalci<-Bw_MFB+c(-1,1)*qnorm(0.95)*sd/sqrt(n)
normalci
Bw_MFB
2.520202-2.488989
library("fArma", lib.loc="~/R/win-library/3.2")
farimaTrueacf(n = 100, H = 0.7)
b<-arimaTruefft(n = 100, H = 0.7)
b<-farimaTruefft(n = 100, H = 0.7)
farimaStatsSlider()
plot(a)
plot(b)
c<-farimaSim(n = 1000, model = list(ar = c(0.5, -0.5), d = 0.3, ma = 0.1),
method = c("freq", "time"), ...)
function(n = 1000, model = list(ar = c(0.5, -0.5), d = 0.3, ma = 0.1),
method = c("freq", "time"), ...)
n = 10000
d = 0.2
H = d + 0.5
set.seed(1953)
x = farimaSim(n, model = list(d = 0.2))
x
plot(x)
summary(x)
acf(x, main = "FARIMA: ACF")
y = farimaTrueacf(41, H)
points(0:40, y, col = "red")
coef = lsfit(x = log(1:40), y = log(y[-1]))$coef
beta = coef[[2]]
H.estimated = (beta+2)/2
H.estimated
s = spectrum(x, plot = FALSE)$spec
plot(s, type = "h", ylim = c(0, 60), main = "FARIMA: Spectrum")
y = Re(farimaTruefft(n, H))
lines(0:(n/2-1), y[1:(n/2)], col = "red")
plot(log(1:length(s)), log(s), type = "l", main = "log-log Spectrum")
lines(log(1:(n/2)), log(y[1:(n/2)]), col = "red")
coef = lsfit(x = log(1:length(s)), y = log(s))$coef
beta = coef[[2]]
H = (1-beta)/2
H
library("longmemo", lib.loc="~/R/win-library/3.2")
arima<-(armaSim(model = list(ar = c(0.5, -0.5), d = 0, ma = 0.1), n = 100,
innov = NULL, n.start = 100, start.innov = NULL,
rand.gen = rnorm, rseed = NULL, addControl = FALSE))
plot(arima)
x1 <- simFGN0(100, 0.7) #Simulación de un proceso fraccional gaussiano
x2 <- simARMA0(100, 0.7)
x3<-plot(simFGN0(1000, 0.8)) #- time series plot
n = 10000
d = 0.2
H = d + 0.5
set.seed(1953)
x = farimaSim(n, model = list(d = 0.2))
# Sample and True ACF:
acf(x, main = "FARIMA: ACF")
y = farimaTrueacf(41, H)
points(0:40, y, col = "red")
coef = lsfit(x = log(1:length(s)), y = log(s))$coef
beta = coef[[2]]
H = (1-beta)/2
plot(log(1:length(s)), log(s), type = "l", main = "log-log Spectrum")
lines(log(1:(n/2)), log(y[1:(n/2)]), col = "red")
s = spectrum(x, plot = FALSE)$spec
plot(s, type = "h", ylim = c(0, 60), main = "FARIMA: Spectrum")
y = Re(farimaTruefft(n, H))
lines(0:(n/2-1), y[1:(n/2)], col = "red")
coef = lsfit(x = log(1:40), y = log(y[-1]))$coef
beta = coef[[2]]
H.estimated = (beta+2)/2
coef = lsfit(x = log(1:40), y = log(y[-1]))$coef
beta = coef[[2]]
H.estimated = (beta+2)/2
H.estimated
acf(x, main = "FARIMA: ACF")
y = farimaTrueacf(41, H)
points(0:40, y, col = "red")
n = 10000
d = 0.2
H = d + 0.5
set.seed(1953)
x = farimaSim(n, model = list(d = 0.2))
plot(x)
H
plot(x, main="F-Arima Model")
plot(x, main="F-Arima Model (p,d,q)")
n = 1000
d = 0.2
H = d + 0.5
set.seed(1953)
x = farimaSim(n, model = list(d = 0.2))
plot(x, main="F-Arima Model (p,d,q)")
n = 3000
d = 0.2
H = d + 0.5
set.seed(1953)
x = farimaSim(n, model = list(d = 0.2))
plot(x, main="F-Arima Model (p,d,q)")
set_belly<-head(belly,1025) #packet size
set_bellx<-head(bellx,1025) #time
plot(set_bellx,set_belly,type="l",xlab="time (ms)",ylab="Packets",main="Muestra Bellcore trace", ylim=c(0,500))
abline(v=NULL,h=400,lty=3,col="green")
abline(v=NULL,h=35,lty=3,col="green")
summary(belly)
m<-summary(belly)
m$Mean
m[Mean
]
summary(belly, mean)
summary(belly, Mean)
l<-mean(belly)/1000
l
mean(belly)/100
l<-mean(belly)/100
l
summary(belly)
summary(DS$DS_Kbps)
summary(belly/1000)
summary(belly/100)
head(belly)
#Simulación procesos LDR
dataKb<-belly/100
summary(dataKb)
u<-mean(dataKb)
var<-var(dataKb)
u
var
max(dataKb)
p<-max(dataKb)  #taza pico de la traza
l<-mean(dataKb) #taza promedio de tráfico
var<-var(dataKb)#Varianza de la traza
b<-(p-l)/var     #Medida de ráfagas (burstiness)
H
H<-0.7164
rsFit(x, levels = 50, minnpts = 3, cut.off = 10^c(0.7, 2.5),
doplot = TRUE, trace = FALSE, title = NULL, description = NULL)
R/S<-rsFit(x, levels = 50, minnpts = 3, cut.off = 10^c(0.7, 2.5),
doplot = TRUE, trace = FALSE, title = NULL, description = NULL)
RS<-rsFit(x, levels = 50, minnpts = 3, cut.off = 10^c(0.7, 2.5),
doplot = TRUE, trace = FALSE, title = NULL, description = NULL)
RS@hurst
data(ethernetTraffic)
x<-ethernetTraffic
summary(x)
RS<-rsFit(x, levels = 50, minnpts = 3, cut.off = 10^c(0.7, 2.5),
doplot = TRUE, trace = FALSE, title = NULL, description = NULL)
RS@hurst
RS@parameter
c(RS@hurst)
c(RS@hurst)
data.frame(RS@hurst)
data.frame(RS@hurst)$H
data.frame(RS@hurst)$H[1]
RS@parameter
b
H
plot(x)
plot(dataKb)
summary(set_belly)
plot(set_belly)
legend("b=6.710393, H=0.7164")
plot(set_belly, type="lfy")
legend("b=6.710393, H=0.7164")
text(400,400,"b=6.710393, H=0.7164")
text(500,400,"b=6.710393, H=0.7164")
plot(set_belly, type="lfy")
text(500,400,"b=6.710393, H=0.7164")
plot(set_belly, type="l",ylim=c(0,450))
text(500,400,"b=6.710393, H=0.7164")
plot(set_belly, type="l",ylim=c(0,450))
text(500,410,"b=6.710393, H=0.7164")
plot(set_belly, type="l",ylim=c(0,500))
text(500,450,"b=6.710393, H=0.7164")
plot(set_belly, type="l",ylim=c(0,480))
text(500,450,"b=6.710393, H=0.7164")
plot(set_belly, type="l",ylim=c(0,470))
text(500,450,"b=6.710393, H=0.7164")
plot(set_belly, type="l",ylim=c(0,470), main="Bursty LRD traffic")
text(500,450,"b=6.710393, H=0.7164")
plot(set_belly, type="l",ylim=c(0,470), submain="Bursty LRD traffic")
text(500,450,"b=6.710393, H=0.7164")
plot(set_belly, type="l",ylim=c(0,470), sub="Bursty LRD traffic")
text(500,450,"b=6.710393, H=0.7164")
plot(set_belly, type="l",ylim=c(0,470),xlab="time",ylab="Kbps")
text(500,450,"b=6.710393, H=0.7164")
n = 3000
d = 0.2
f = farimaSim(n, model = list(d = 0.2))
plot(f, main="F-Arima Model (p,d,q)")
plot(set_belly, type="l",ylim=c(0,470),xlab="time",ylab="Kbps")
plot(dataKb, type="l",ylim=c(0,470),xlab="time",ylab="Kbps")
plot(dataKb, type="l",ylim=c(0,4.70),xlab="time",ylab="Kbps")
text(5.00,4.50,"b=6.710393, H=0.7164")
text(4000,4.50,"b=6.710393, H=0.7164")
plot(dataKb, type="l",ylim=c(0,4.70),xlab="time",ylab="Kbps")
text(3000,4.50,"b=6.710393, H=0.7164")
n = 3000
d = 0.2
H = d + 0.5
set.seed(1953)
f = farimaSim(n, model = list(d = 0.2))
plot(f, main="F-Arima Model (p,d,q)")
H<-data.frame(RS@hurst)$H[1]
H-0.5
d = H - 0.5
d
